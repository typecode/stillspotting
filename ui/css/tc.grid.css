/*------------------------------------------
	grid
	
	Example markup:
	<div class="grid xFull">
		<div class="column x8">
			<div class="column x2">
				...
			</div>
			<div class="column x6">
				...
			</div>
		</div>
		<div class="column x4">
			...
		</div>
	</div>
------------------------------------------*/

/*----- base -----*/

.grid:after { 
	content:"."; display:block; clear:both; 
	visibility:hidden; line-height:0; height:0; 
}
.grid { 
	position:relative; display:inline-block;
	margin:auto; text-align:left; 
}
html[xmlns] .grid { display:block; }
* html .grid { zoom:1; }

.column   { float:left; display:inline; }
.column-r { float:right; display:inline; }

/*----- widths -----*/
	/* --- In this scheme, the fixed width columns 
	       are all pushed against one another, and so
	       are not expected to have any margins or padding.
		*/
		
/*.x1 { width:122px; }
.x2 { width:244px; }
.x3 { width:366px; }
.x4 { width:488px; }
.x5 { width:610px; }
.x6 { width:732px; }
.x7 { width:854px; }
.x8 { width:976px; }
.xFull { width:976px; clear:both; }*/

.x1 { width:112px; }
.x2 { width:234px; }
.x3 { width:356px; }
.x4 { width:478px; }
.x5 { width:600px; }
.x6 { width:722px; }
.x7 { width:844px; }
.x8 { width:966px; }
.xFull { width:966px; clear:both; }
.special { min-width:966px; clear:both; }

/*----- gutters -----*/
	/* --- In this scheme, the fixed width columns
	       are spaced apart by a margin (so "widths" section
	       should be adjusted accordingly). The margin is
	       set on the side towards which the column is
	       floating, thus pushing it away from any preceding
	       columns. The first-child selector is used to
	       zero out the margin on the farthest floated column.
	       This allows for arbitrary nesting of columns.
		*/

.column { margin-left:10px ; }
.column:first-child { margin-left:0; }

.column-r { margin-right:10px; }
.column-r:first-child { margin-right:0; }

.column.xFull,
.column-r.xFull,
.column.special,
.column-r.special { margin-left:0; margin-right:0; }